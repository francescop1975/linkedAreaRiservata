using System;
using System.Linq;
using System.Web;
using System.Data;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Xml;
using PersonalLib2.Data;
#if !Frontoffice
using Init.SIGePro.Data;
using Init.SIGePro.Manager;
using Init.SIGePro.Authentication;
using Init.SIGePro.Manager.Logic.Cosap.Pisa.Formule;
#else
using Init.Sigepro.FrontEnd;
using Init.Sigepro.FrontEnd.AppLogic;
using Init.Sigepro.FrontEnd.AppLogic.WebServiceReferences.IstanzeService;
using Init.Sigepro.FrontEnd.AppLogic.Autenticazione.Formule;
#endif
using System.Collections.Generic;
using Init.SIGePro.DatiDinamici;
using Init.SIGePro.DatiDinamici.VisibilitaCampi;

// Using definiti a livello di formula
@BLOCCO_USING

namespace @NAMESPACE {
	public class @NOME_CLASSE 
	{
		private string m_token;
		public string Token{get{return m_token;}set{m_token = value;}}

#if Istanza		
		private Istanze m_istanzaCorrente;
		public Istanze IstanzaCorrente{get{return m_istanzaCorrente;}set{m_istanzaCorrente = value;}}
#endif

#if !Frontoffice



#if Anagrafe		
		private Anagrafe m_anagraficaCorrente;
		public Anagrafe AnagraficaCorrente{get{return m_anagraficaCorrente;}set{m_anagraficaCorrente = value;}}
#endif

#if Attivita		
		private IAttivita m_attivitaCorrente;
		public IAttivita AttivitaCorrente{get{return m_attivitaCorrente;}set{m_attivitaCorrente = value;}}
#endif

#endif

#if !Frontoffice
		private AuthenticationInfo _authInfo = null;

		protected AuthenticationInfo CheckToken()
		{
			if(_authInfo == null)
				_authInfo = AuthenticationManager.CheckToken(Token);

			return _authInfo;
		}

		protected DataBase CreateDatabase()
		{
			var authInfo = CheckToken();

			if( authInfo == null )
				throw new Exception("Creazione della struttura AuthenticationInfo fallita");

			return authInfo.CreateDatabase();
		}
#endif


#if Frontoffice

		private IFormuleAuthenticationInfo _authInfo = null;

		protected IFormuleAuthenticationInfo CheckToken()
		{
			if(_authInfo == null)
				_authInfo = new AutenticazioneFormuleService().CheckToken(Token);

			return _authInfo;
		}

		protected IDatabase CreateDatabase()
		{
			_authInfo = CheckToken();

			if( _authInfo == null )
				throw new Exception("Creazione di IFormuleAuthenticationInfo fallita");

			return _authInfo.CreateDatabase();
		}
#endif


		private ModelloDinamicoBase m_modelloCorrente;
		public ModelloDinamicoBase ModelloCorrente{get{return m_modelloCorrente;}set{m_modelloCorrente = value;}}

		List<Init.SIGePro.DatiDinamici.ValidazioneValoriCampi.ErroreValidazione> _erroriValidazione = new List<Init.SIGePro.DatiDinamici.ValidazioneValoriCampi.ErroreValidazione>();
		public IEnumerable<Init.SIGePro.DatiDinamici.ValidazioneValoriCampi.ErroreValidazione> ErroriValidazione{get{ return _erroriValidazione;}}

		@FUNZIONI_COMUNI


		SessioneModificaVisibilitaCampi _sessioneModificaVisibilita;

		public void OnPreExecute(SessioneModificaVisibilitaCampi sessioneModificaVisibilita)
		{
			this._sessioneModificaVisibilita = sessioneModificaVisibilita;
			this._erroriValidazione.Clear();
		}

		public void OnPostExecute()
		{
		}

		public object @NOME_METODO(CampoDinamicoBase CampoModificato, int IndiceCampoModificato, bool PerIncrementoMolteplicita) 
		{
			#if !Frontoffice
				CheckToken();
			#endif

			@CORPO_SCRIPT
			
			return null;
		}

		protected CampoDinamicoBase TrovaCampo(string nomeCampo)
		{
			return ModelloCorrente.TrovaCampo(nomeCampo);
		}

		protected CampoDinamicoBase TrovaCampo(int id)
		{
			return ModelloCorrente.TrovaCampoDaId(id);
		}


		protected void ErroreValidazioneCampo( string messaggio, CampoDinamicoBase campo , int indice=0)
		{
			_erroriValidazione.Add( new Init.SIGePro.DatiDinamici.ValidazioneValoriCampi.ErroreValidazione( messaggio, campo.Id, indice ) );
		}		

		public static System.Globalization.NumberFormatInfo GetNumericFormat()
		{
			var fi = new System.Globalization.NumberFormatInfo();
			fi.NumberDecimalSeparator = ",";
			fi.NumberGroupSeparator = "";
		
			return fi;
		}


		// Nasconde tutti i valori di un campo o di una lista di campi
		public void MostraCampiDinamici(IEnumerable<string> nomiCampi)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(nomiCampi, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampiDinamici(IEnumerable<string> nomiCampi)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(nomiCampi, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		public void MostraCampoDinamico(string nomeCampo)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(nomeCampo, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampoDinamico(string nomeCampo)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(nomeCampo, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		public void MostraCampiTestuali(IEnumerable<int> idCampi)
		{
			var campi = idCampi.Select(x => -1 * x);

			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(campi, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampiTestuali(IEnumerable<int> idCampi)
		{
			var campi = idCampi.Select(x => -1 * x);

			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(campi, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		public void MostraCampoTestuale(int idCampo)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(-1 * idCampo, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampoTestuale(int idCampo)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(-1 * idCampo, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		// Nasconde i campi in base all'indice
		public void MostraCampiDinamici(IEnumerable<string> nomiCampi, int indiceMolteplicita)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(nomiCampi,indiceMolteplicita, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampiDinamici(IEnumerable<string> nomiCampi, int indiceMolteplicita)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(nomiCampi,indiceMolteplicita, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		public void MostraCampoDinamico(string nomeCampo, int indiceMolteplicita)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(nomeCampo,indiceMolteplicita, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampoDinamico(string nomeCampo, int indiceMolteplicita)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(nomeCampo,indiceMolteplicita, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		public void MostraCampiTestuali(IEnumerable<int> idCampi, int indiceMolteplicita)
		{
			var campi = idCampi.Select(x => -1 * x);

			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(campi,indiceMolteplicita, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampiTestuali(IEnumerable<int> idCampi, int indiceMolteplicita)
		{
			var campi = idCampi.Select(x => -1 * x);

			this._sessioneModificaVisibilita.ImpostaVisibilitaCampi(campi,indiceMolteplicita, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		public void MostraCampoTestuale(int idCampo, int indiceMolteplicita)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(-1 * idCampo,indiceMolteplicita, StatoVisibilitaCampoEnum.Visibile); 
		}

		public void NascondiCampoTestuale(int idCampo, int indiceMolteplicita)
		{
			this._sessioneModificaVisibilita.ImpostaVisibilitaCampo(-1 * idCampo,indiceMolteplicita, StatoVisibilitaCampoEnum.NonVisibile); 
		}

		#if Frontoffice
			IEnumerable<Init.SIGePro.Manager.DTO.DatiDinamici.DecodificaDto> 
		#else
			IEnumerable<Init.SIGePro.Manager.Logic.GestioneDecodifiche.DecodificaDTO>
		#endif
		GetDecodificheAttive( string tabella ){

			#if !Frontoffice			
				var authInfo = CheckToken();
				var mgr = new Init.SIGePro.Manager.Logic.GestioneDecodifiche.DecodificheService(authInfo.CreateDatabase(), authInfo.IdComune);
			#else
				var mgr = new Init.Sigepro.FrontEnd.AppLogic.DatiDinamici.Formule.FormuleDatiDinamiciService();
			#endif
		
			return mgr.GetDecodificheAttive( tabella );
		}

		#if DEBUG_SCRIPT
		public void Debug(string message)
		{
			ModelloCorrente.Debug(message);
		}

		public void Debug(CampoDinamicoBase campo)
		{
			ModelloCorrente.Debug(campo);
		}
		#endif
	}
} 