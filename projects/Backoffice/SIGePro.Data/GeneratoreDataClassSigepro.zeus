##|TYPE Template
##|UNIQUEID 774dc493-eb5d-4b48-a75d-c61e3fb8e98d
##|TITLE Generatore DataClass Sigepro
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	GuiComboBox cmbDatabases;
	GuiComboBox  cmbTables;
	GuiTextBox	 txtClassName;
	GuiTextBox	 txtFiltro;

	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		if (context.Objects.ContainsKey("DnpUtils"))
		{
			DnpUtils.ReadInputFromCache(context);
		}

		ui.Width  = 800;
		ui.Height = 600;

		ui.Title = "Genera le entità per il progetto Sigepro.Data";

		//Grab default output path
		string sOutputPath = "";
		
		if ( input.Contains("defaultOutputPath") )
		{
			sOutputPath = (string)input["defaultOutputPath"];
		}
		
		ui.AddLabel ("lblMappingsFilePath", "Percorso del file Sigepro.mappings: ",  "Selezionare il percorso del file Sigepro.mappings");
		ui.AddTextBox( "txtMappingFilePath", "", "Selezionare il percorso del file Sigepro.mappings" );
		ui.AddFilePicker( "btnMappingFilePath", "Selezionare il percorso del file Sigepro.mappings", "Selezionare il percorso del file Sigepro.mappings.", "txtMappingFilePath", false );
	
		ui.AddCheckBox("chkGeneraClassiNonAutogen" , "Genera classi non autogen (utilizzare solo se non sono mai state generate classi per le tabelle contenute nel file.mappings)",false,"Genera classi non autogen ");
	
		ui.AddLabel ("lblPath", "Percorso di output: ",  "Selezionare il percorso in cui verranno salvati i files.");
		ui.AddTextBox( "txtPath", sOutputPath, "Select the Output Path." );
		ui.AddFilePicker( "btnPath", "Select Path", "Select the Output Path.", "txtPath", true );
	
		//List Databases in a ComboBox
		ui.AddLabel ("lblDatabases", "Database:", "Selezionare il database.");
		cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.");
/*
		ui.AddLabel ("lblFiltro" , "Filtro:" , "Filtro per individuare le tabelle");
		txtFiltro = ui.AddTextBox( "txtFiltro" ,"", "Specificare un filtro" );
*/
		//List Tables in a listbox
		ui.AddLabel ("lblTables", "Selezionare la tabella:", "Selezionare la tabella nella lista qui sotto.");
		cmbTables = ui.AddComboBox ("cmbTables", "Select tables:");

		// Class name
		ui.AddLabel ("lblClassName", "Class name:", "Select the name of the class.");
		ui.AddTextBox( "txtClassName", "", "Select the Class Name." );
		
		//Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown (cmbDatabases);
		/*txtFiltro.AttachEvent("onblur " , "txtFiltro_ontextChanged" );*/
		cmbDatabases.AttachEvent ("onchange", "cmbDatabases_onchange");
		cmbTables.AttachEvent ("onchange", "cmbTables_onchange");
		
		cmbDatabases.Select("SIGEPRO2");
		bindTables(cmbDatabases.SelectedText);
	
		ui.ShowGui = true;
	}


	public void setupDatabaseDropdown(GuiComboBox cmbDatabases)
	{
		cmbDatabases.BindData ( MyMeta.Databases );

		if ( MyMeta.DefaultDatabase != null )
		{
			cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
			bindTables ( cmbDatabases.SelectedValue);
		}
	}

	public void bindTables(string sDatabase)
	{
		GuiTextBox txt = (GuiTextBox)ui["txtFiltro"];
		IDatabase db = MyMeta.Databases[sDatabase];
		cmbTables.BindData(db.Tables);
		
		/*foreach( ITable tbl in db.Tables )
		{
			if ( txt.Text != String.Empty && tbl.Name.ToUpper().IndexOf( txt.Text.ToUpper() ) == -1 ) continue;
			
			cmbTables.Add( tbl.Name , tbl.Name );
		}*/
	}
	
	/*
	public void txtFiltro_ontextChanged(GuiTextBox txt)
	{
		cmbDatabases = (GuiComboBox)ui["cmbDatabase"];
		bindTables(cmbDatabases.SelectedText);
	}*/

	// Event Handler
	public void  cmbDatabases_onchange(GuiComboBox control)
	{
		cmbDatabases = (GuiComboBox)ui["cmbDatabase"];
		bindTables(cmbDatabases.SelectedText);
	}
	
		// Event Handler
	public void  cmbTables_onchange(GuiComboBox control)
	{
		cmbTables = (GuiComboBox)ui["cmbTables"];
		txtClassName = (GuiTextBox)ui["txtClassName"];
		txtClassName.Text = cmbTables.SelectedText;
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#REFERENCE System.Data.dll %><%#NAMESPACE System.Data %><%#REFERENCE System.Data.OracleClient.dll %><%#NAMESPACE System.Data.OracleClient %><%
	public class ClassTableMapping
	{
		string m_nomeClasse;
		string m_nomeTabella;
		
		public string NomeClasse
		{
			get{ return m_nomeClasse;}
			set{ m_nomeClasse = value;}
		}
		
		public string NomeTabella
		{
			get{ return m_nomeTabella;}
			set{ m_nomeTabella = value;}
		}
		
		public ClassTableMapping(string classe , string tabella){NomeClasse = classe;NomeTabella = tabella;}
	}
	
	public class MyGenerationTableMappings
	{
		ClassTableMapping[] m_maps;
		
		public ClassTableMapping[] Maps
		{
			get{ return m_maps; }
			set{ m_maps = value; }
		}
	}


public class GeneratedTemplate : DotNetScriptTemplate
{
	string m_oracleConnectionString = "Data Source=dbora10g;User Id=sigepro2;Password=SI24INIT;";
	IDatabase m_database = null;
//	ITable m_table = null;
	string m_databaseName = String.Empty;
//	string m_tableName = String.Empty;
//	string m_className = String.Empty;
	string m_outputPath = String.Empty;

	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		//GuiListBox lstTables = (GuiListBox)input["lstTables"];
		//GuiComboBox cmbDatabases = (GuiComboBox)input["cmbDatabases"];
		System.Text.StringBuilder outBuffer = new System.Text.StringBuilder();
		outBuffer.AppendLine("Operazione iniziata il " + DateTime.Now.ToString() );
		
		MyGenerationTableMappings mappings = new MyGenerationTableMappings();
		
		string mappingsFilePath = (string)input["txtMappingFilePath"];
		
		bool generaClassiNonAutogen = (bool)input["chkGeneraClassiNonAutogen"];
		
		if (mappingsFilePath != null && mappingsFilePath != String.Empty)
		{
			using(System.IO.StreamReader sr = new System.IO.StreamReader(mappingsFilePath))
			{
				string content = sr.ReadToEnd();
				string[] rows = content.Replace("\r","").Split('\n');
				
				mappings.Maps = new ClassTableMapping[ rows.Length ];
				
				for (int i = 0 ; i< rows.Length; i++)
				{
					string str = rows[i];

					string[] parts = str.Split('=');
					
					mappings.Maps[i] = new ClassTableMapping( parts[0].Trim() , parts[1].Trim().ToUpper() );
				}
			}
		}
		else
		{
			mappings.Maps = new ClassTableMapping[ 1 ];
			mappings.Maps[0] = new ClassTableMapping( (string)input["txtClassName"] , (string)input["cmbTables"] );
		}

		
		
		m_outputPath   = (string)input["txtPath"];
		
		if ( !m_outputPath.EndsWith("\\") )
		{
			m_outputPath += "\\";
		}

		m_databaseName 	= (string)input["cmbDatabase"];
		m_database 		= MyMeta.Databases[ m_databaseName ];



		for ( int i = 0 ; i < mappings.Maps.Length ; i++ )
		{
			//m_table 	= m_database.Tables[ m_tableName ];
			string tableName 	= mappings.Maps[i].NomeTabella;
			string className 	= mappings.Maps[i].NomeClasse;
			ITable dbTable = m_database.Tables[ tableName ];
			%>
					using System;
					using System.Data;
					using System.Reflection;
					using System.Text;
					using Init.SIGePro.Attributes;
					using Init.SIGePro.Collection;
					using PersonalLib2.Sql.Attributes;
					using PersonalLib2.Sql;

					namespace Init.SIGePro.Data
					{
						///
						/// File generato automaticamente dalla tabella <%=tableName%> il <%=DateTime.Now.ToString()%>
						///
						///												ATTENZIONE!!!
						///	- Specificare manualmente in quali colonne vanno applicate eventuali sequenze		
						/// - Verificare l'applicazione di eventuali attributi di tipo "[isRequired]". In caso contrario applicarli manualmente
						///	- Verificare che il tipo di dati assegnato alle proprietà sia corretto
						///
						///						ELENCARE DI SEGUITO EVENTUALI MODIFICHE APPORTATE MANUALMENTE ALLA CLASSE
						///				(per tenere traccia dei cambiamenti nel caso in cui la classe debba essere generata di nuovo)
						/// -
						/// -
						/// -
						/// - 
						///
						///	Prima di effettuare modifiche al template di MyGeneration in caso di dubbi contattare Nicola Gargagli ;)
						///
						[DataTable("<%=tableName.ToUpper()%>")]
						[Serializable]
						public partial class <%=className%> : BaseDataClass
						{
							#region Membri privati
							<%
							foreach( IColumn column in dbTable.Columns ){%>
							<%=GetPrivateField(column)%><%
							}
							
							%>			
							#endregion
							
							#region properties
							
							#region Key Fields
							
							<%foreach( IColumn column in dbTable.Columns ){
								if (!column.IsInPrimaryKey) continue;
							%>
							<%=WriteKeyFieldAttribute(column)%><%=WriteUseSequenceAttribute(column)%>
							public <%=GetMappedType( column ) %> <%=PropertyName( column )%>
							{
								get{ return m_<%=column.Name.ToLower()%>; }
								set{ m_<%=column.Name.ToLower()%> = value; }
							}
							<%}%>
							
							#endregion
							
							#region Data fields
							<%foreach( IColumn column in dbTable.Columns ){
								if (column.IsInPrimaryKey) continue;
							%>
							<%=WriteDataFieldAttribute(column)%>
							public <%=GetMappedType( column ) %> <%=PropertyName( column )%>
							{
								get{ return m_<%=column.Name.ToLower()%>; }
								set{ m_<%=column.Name.ToLower()%> = value; }
							}
							<%}%>
							#endregion

							#endregion
						}
					}
				<%
						
			string fileName = "Classi\\" + className + ".autogen.cs";
			
			outBuffer.AppendLine("Generato il file " + m_outputPath  + fileName );
			output.save( m_outputPath + fileName , "o");
			output.clear();
			
			if (generaClassiNonAutogen)
			{
				%>
using System;
using System.Collections.Generic;
using System.Text;
using Init.SIGePro.Attributes;
using PersonalLib2.Sql.Attributes;
using System.Data;

namespace Init.SIGePro.Data
{
    public partial class <%=className%>
    {
	
	}
}
				<%
				
				fileName = "Classi\\" + className + ".cs";
			
				outBuffer.AppendLine("Generato il file " + m_outputPath  + fileName );
				output.save( m_outputPath + fileName , "o");
				output.clear();
			}
			
			// Generazione del codice del manager della classe
			%>
			
using System;
using System.Collections.Generic;
using System.Text;
using Init.SIGePro.Manager;
using PersonalLib2.Data;
using Init.SIGePro.Data;

using Init.SIGePro.Validator;
using PersonalLib2.Sql;

namespace Init.SIGePro.Manager
{

	///
	/// File generato automaticamente dalla tabella <%=tableName%> per la classe <%=className%> il <%=DateTime.Now.ToString()%>
	///
	///						ELENCARE DI SEGUITO EVENTUALI MODIFICHE APPORTATE MANUALMENTE ALLA CLASSE
	///				(per tenere traccia dei cambiamenti nel caso in cui la classe debba essere generata di nuovo)
	/// -
	/// -
	/// -
	/// - 
	///
	///	Prima di effettuare modifiche al template di MyGeneration in caso di dubbi contattare Nicola Gargagli ;)
	///
	public partial class <%=className%>Mgr : BaseManager
	{
		public <%=className%>Mgr(DataBase dataBase) : base(dataBase) { }

		public <%=className%> GetById(<%=ArgomentiGetById(dbTable.Columns)%>)
		{
			<%=className%> c = new <%=className%>();
			
			<%foreach( IColumn col in dbTable.Columns ){if ( !col.IsInPrimaryKey ) continue;%>
			c.<%=PropertyName(col)%> = <%=col.Name.ToLower()%>;<%}%>
			
			return (<%=className%>)db.GetClass(c);
		}

		public List<<%=className%>> GetList(<%=className%> filtro)
		{
			return db.GetClassList( filtro ).ToList< <%=className%>>();
		}

		public <%=className%> Insert(<%=className%> cls)
		{
			cls = DataIntegrations(cls);

			Validate(cls, AmbitoValidazione.Insert);
		
			db.Insert(cls);
			
			cls = (<%=className%>)ChildDataIntegrations(cls);

			ChildInsert(cls);

			return cls;
		}
		
		public override DataClass ChildDataIntegrations(DataClass cls)
		{
			return cls;
		}

		private <%=className%> ChildInsert(<%=className%> cls)
		{
			return cls;
		}

		private <%=className%> DataIntegrations(<%=className%> cls)
		{
			return cls;
		}
		

		public <%=className%> Update(<%=className%> cls)
		{
			Validate( cls , AmbitoValidazione.Update );
		
			db.Update(cls);

			return cls;
		}

		public void Delete(<%=className%> cls)
		{
			VerificaRecordCollegati( cls );
			
			EffettuaCancellazioneACascata( cls );
		
			db.Delete(cls);
		}
		
		private void VerificaRecordCollegati(<%=className%> cls )
		{
			// Inserire la logica di verifica di integrità referenziale
			// Sollevare un'eccezione di tipo ReferentialIntegrityException nel caso in cui il record sia usato in foreign key in altre tabelle
		}
			
		private void EffettuaCancellazioneACascata(<%=className%> cls )
		{
			// Inserire la logica di cancellazione a cascata di dati collegati
		}
		
		
		private void Validate(<%=className%> cls, AmbitoValidazione ambitoValidazione)
		{
			RequiredFieldValidate( cls , ambitoValidazione );
		}	
	}
}
			
			
			<%
			fileName = "Manager\\" + className + "Mgr.autogen.cs";
			
			outBuffer.AppendLine("Generato il file " + m_outputPath + fileName );
			output.save( m_outputPath + fileName , "o");
			output.clear();
			
			if (generaClassiNonAutogen)
			{
				%>
using System;
using System.Collections.Generic;
using System.Text;
using Init.SIGePro.Data;
using Init.SIGePro.Exceptions;
using System.Data;
using System.ComponentModel;
using Init.SIGePro.Authentication;

using PersonalLib2.Sql;
using Init.Utils.Sorting;

namespace Init.SIGePro.Manager
{
    [DataObject(true)]
    public partial class <%=className%>Mgr
    {
	
	}
}
				<%
				
				fileName = "Manager\\" + className + "Mgr.cs";
			
				outBuffer.AppendLine("Generato il file " + m_outputPath  + fileName );
				output.save( m_outputPath + fileName , "o");
				output.clear();
			}
		}
		
		outBuffer.AppendLine("Operazione terminata il " + DateTime.Now.ToString() );
	
		output.write( outBuffer.ToString());
	}

	private string ArgomentiGetList(IColumns columns)
	{
		string str = "";
	
		foreach( IColumn col in columns )
		{
			if (str != "")
				str +=", ";
				
			str += GetMappedType( col );
			str += " ";
			str += col.Name.ToLower();
		}
		
		return str;
	}

	private string ArgomentiGetById(IColumns columns)
	{
		string str = "";
	
		foreach( IColumn col in columns )
		{
			if ( !col.IsInPrimaryKey ) continue;
			
			if (str != "")
				str +=", ";
				
			str += GetMappedType( col );
			str += " ";
			str += col.Name.ToLower();
		}
		
		return str;
	}
	
	
	private string WriteKeyFieldAttribute( IColumn column)
	{
		string str = "[KeyField(\"" + column.Name.ToUpper() + "\" , Type=DbType." + Camelcase( column.LanguageType );
	 	
		if ( column.LanguageType == "string" )
		{
			str += ", Size=" + column.CharacterMaxLength;
		}
		
		str += ")]";
	
		return str;
	}
	
	
	private string WriteUseSequenceAttribute( IColumn column )
	{
		string sql = "select count(*) from sequencetable where upper(sequencename) = '" + column.Table.Name.ToUpper() + "." + column.Name.ToUpper() + "'";
		
		using(OracleConnection cnn = new OracleConnection(m_oracleConnectionString))
		{
			cnn.Open();
			
			using(OracleCommand cmd = cnn.CreateCommand())
			{
				cmd.CommandText = sql;
				
				object obj = cmd.ExecuteScalar();
				
				if (obj == null || obj == DBNull.Value) return String.Empty;
				
				if (Convert.ToInt32( obj ) > 0)
					return "\r\n[useSequence]";
					
				return String.Empty;
			}
		}
		
	}


	private string WriteDataFieldAttribute( IColumn column)
	{
		string str = "";
		
		if( !column.IsNullable )
		{
			str += "[isRequired]\r\n";
		}
		
		string languageType = column.LanguageType;
		
		if (languageType == "byte[]")
			languageType = "Binary";
		
		str += "[DataField(\"" + column.Name.ToUpper() + "\" , Type=DbType." + Camelcase( languageType );
	 	
		if ( column.LanguageType == "string" )
		{
			str += ", CaseSensitive=false, Size=" + column.CharacterMaxLength;
		}
		
		str += ")]";
	
		return str;
	}


	
	private string PropertyName( IColumn column )
	{
		return Camelcase( column.Name.ToLower() );
	}
	
	private string Camelcase(string name)
	{
		string[] parts  = name.Split( '_' );

		string retVal = String.Empty;

		for ( int i = 0; i < parts.Length; i++ )
		{
			string local = parts[i];
			local = parts[ i ][ 0 ].ToString( ).ToUpper( ) + local.Remove( 0, 1 );
			retVal += local;
		}

		return retVal;
	}
	
	private string GetMappedType( IColumn column )
	{
		switch( column.LanguageType )
		{
			case( "string" ):
			{
				return "string";
			}
			
			case( "decimal" ):
			case( "float" ):
			case( "double" ):
			case( "int" ):
			{
				if ( column.NumericScale > 0 )
					return "double?";
				else
					return "int?";
			}
			case( "DateTime" ):
			{
				return "DateTime?";
			}
			case("byte[]"):
			{
				return "byte[]";
			}
			default:
				return "#error \"Tipo " + column.LanguageType + " non trovato\";";
		}
	}

	private string GetDefaultValue( IColumn column )
	{
		switch( column.LanguageType )
		{
			case( "string" ):
			{
				return "null";
			}
			
			case( "decimal" ):
			case( "float" ):
			case( "double" ):
			case( "int" ):
			{
				if ( column.NumericScale > 0 )
					return "null";
				else
					return "null";
			}
			case( "DateTime" ):
			{
				return "null";
			}
			case("byte[]"):
			{
				return "null";
			}
			
			default:
				return "#error \"Tipo " + column.LanguageType + " non trovato\";";
		}
	}

	
	private string GetPrivateField(IColumn column)
	{
		string temp = "private ";
		
		temp += GetMappedType( column );
		
		temp += " m_" + column.Name.ToLower() + " = " + GetDefaultValue( column ) + ";\r\n";

		return temp;
	}
}
%>
##|BODY_END
