//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// Codice sorgente generato automaticamente da wsdl, versione=1.1.4322.2407.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="CWSSigeproExpSoap", Namespace="http://tempuri.org/")]
public class CWSSigeproExp : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public CWSSigeproExp() {
        this.Url = "http://localhost/WSSigeproExport/Service1.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListExp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ListExp() {
        object[] results = this.Invoke("ListExp", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginListExp(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListExp", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndListExp(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEsportazione", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetEsportazione(int iIDExp) {
        object[] results = this.Invoke("GetEsportazione", new object[] {
                    iIDExp});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEsportazione(int iIDExp, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEsportazione", new object[] {
                    iIDExp}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetEsportazione(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Export", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public System.Byte[] Export(string sToken, string sXmlFile, int iIDExp) {
        object[] results = this.Invoke("Export", new object[] {
                    sToken,
                    sXmlFile,
                    iIDExp});
        return ((System.Byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExport(string sToken, string sXmlFile, int iIDExp, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Export", new object[] {
                    sToken,
                    sXmlFile,
                    iIDExp}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Byte[] EndExport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Byte[])(results[0]));
    }
}
